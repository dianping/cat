/* THIS FILE WAS AUTO GENERATED BY codegen-maven-plugin, DO NOT EDIT IT */
package com.dianping.cat.configuration.model.entity;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import com.dianping.cat.configuration.model.BaseEntity;
import com.dianping.cat.configuration.model.IVisitor;

public class ClientConfig extends BaseEntity<ClientConfig> {
   private boolean m_enabled = true;

   private Host m_host;

   private Domain m_domain;

   private List<Server> m_servers = new ArrayList<Server>();

   private Map<String, Property> m_properties = new LinkedHashMap<String, Property>();

   private Map<String, String> m_dynamicAttributes = new LinkedHashMap<String, String>();

   public ClientConfig() {
   }

   @Override
   public void accept(IVisitor visitor) {
      visitor.visitConfig(this);
   }

   public ClientConfig addProperty(Property property) {
      m_properties.put(property.getName(), property);
      return this;
   }

   public ClientConfig addServer(Server server) {
      m_servers.add(server);
      return this;
   }

   @Override
   public boolean equals(Object obj) {
      if (obj instanceof ClientConfig) {
         ClientConfig _o = (ClientConfig) obj;

         if (getEnabled() != _o.getEnabled()) {
            return false;
         }

         if (!equals(getHost(), _o.getHost())) {
            return false;
         }

         if (!equals(getDomain(), _o.getDomain())) {
            return false;
         }

         if (!equals(getServers(), _o.getServers())) {
            return false;
         }

         if (!equals(getProperties(), _o.getProperties())) {
            return false;
         }

         if (!m_dynamicAttributes.equals(_o.getDynamicAttributes())) {
            return false;
         }

         return true;
      }

      return false;
   }

   public Property findProperty(String name) {
      return m_properties.get(name);
   }

   public Server findServer(String ip) {
      for (Server server : m_servers) {
         if (!equals(server.getIp(), ip)) {
            continue;
         }

         return server;
      }

      return null;
   }

   public Property findOrCreateProperty(String name) {
      Property property = m_properties.get(name);

      if (property == null) {
         synchronized (m_properties) {
            property = m_properties.get(name);

            if (property == null) {
               property = new Property(name);
               m_properties.put(name, property);
            }
         }
      }

      return property;
   }

   public Server findOrCreateServer(String ip) {
      synchronized (m_servers) {
         for (Server server : m_servers) {
            if (!equals(server.getIp(), ip)) {
               continue;
            }

            return server;
         }

         Server server = new Server(ip);

         m_servers.add(server);
         return server;
      }
   }

   public String getDynamicAttribute(String name) {
      return m_dynamicAttributes.get(name);
   }

   public Map<String, String> getDynamicAttributes() {
      return m_dynamicAttributes;
   }

   public Domain getDomain() {
      return m_domain;
   }

   public boolean getEnabled() {
      return m_enabled;
   }

   public Host getHost() {
      return m_host;
   }

   public Map<String, Property> getProperties() {
      return m_properties;
   }

   public List<Server> getServers() {
      return m_servers;
   }

   @Override
   public int hashCode() {
      int hash = 0;

      hash = hash * 31 + (m_enabled ? 1 : 0);
      hash = hash * 31 + (m_host == null ? 0 : m_host.hashCode());
      hash = hash * 31 + (m_domain == null ? 0 : m_domain.hashCode());
      for (Server e : m_servers) {
         hash = hash * 31 + (e == null ? 0 :e.hashCode());
      }

      hash = hash * 31 + (m_properties == null ? 0 : m_properties.hashCode());
      hash = hash * 31 + m_dynamicAttributes.hashCode();

      return hash;
   }

   public boolean isEnabled() {
      return m_enabled;
   }

   @Override
   public void mergeAttributes(ClientConfig other) {
      for (Map.Entry<String, String> e : other.getDynamicAttributes().entrySet()) {
         m_dynamicAttributes.put(e.getKey(), e.getValue());
      }

      m_enabled = other.getEnabled();
   }

   public Property removeProperty(String name) {
      return m_properties.remove(name);
   }

   public Server removeServer(String ip) {
      int len = m_servers.size();

      for (int i = 0; i < len; i++) {
         Server server = m_servers.get(i);

         if (!equals(server.getIp(), ip)) {
            continue;
         }

         return m_servers.remove(i);
      }

      return null;
   }

   public ClientConfig setDynamicAttribute(String name, String value) {
      m_dynamicAttributes.put(name, value);
      return this;
   }

   public ClientConfig setDomain(Domain domain) {
      m_domain = domain;
      return this;
   }

   public ClientConfig setEnabled(boolean enabled) {
      m_enabled = enabled;
      return this;
   }

   public ClientConfig setHost(Host host) {
      m_host = host;
      return this;
   }

}
