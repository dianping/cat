package com.dianping.tuangou.web.biz.dealgroup;

import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import org.codehaus.plexus.logging.LogEnabled;
import org.codehaus.plexus.logging.Logger;
import org.unidal.helper.Splitters;
import org.unidal.lookup.annotation.Inject;

import com.dianping.cat.abtest.spi.ABTestContext;
import com.dianping.cat.abtest.spi.ABTestEntity;
import com.dianping.cat.abtest.spi.ABTestGroupStrategy;

/**
 * @author hao.zhu
 */
public class RetinaImgGroupStrategy implements ABTestGroupStrategy, LogEnabled {
	public static final String ID = "retina_img_groupstrategy";

	private Set<String> m_dealIds = new HashSet<String>();

	private static Random abRandom = new Random();

	@Inject("percentage")
	private int m_percentage;
	
	@Inject("deals")
	private String m_deals;
	
	private Logger m_logger;

	@Override
	public void apply(ABTestContext ctx) {
		HttpServletRequest request = ctx.getHttpServletRequest();
		String uri = request.getRequestURI();
		
		if(uri.equals("/detail")){
			String dealId = request.getParameter("dealGroupId");
			String lastDealGroup = ctx.getCookielet("l");
			String group = ctx.getCookielet("ab");
			
			if (m_dealIds.contains(dealId)) {
				if (lastDealGroup == null || lastDealGroup.length() == 0) {
					int count = abRandom.nextInt(100);
					
					if (count < m_percentage) {
						lastDealGroup = "A";
					} else {
						lastDealGroup = "B";
					}
				}
				
				group = lastDealGroup;
			} else {
				group = "";
			}
			
			if(lastDealGroup != null){
				ctx.setCookielet("l", lastDealGroup);
			}
			ctx.setCookielet("ab", group);
			ctx.setGroupName(group);
		}
	}

	@Override
	public void init(ABTestEntity entity) {
		String configuration = entity.getGroupStrategyConfiguration();
		List<String> lines = Splitters.by('\n').noEmptyItem().trim()
				.split(configuration);

		for (String line : lines) {
			if (line.startsWith("#")) { // comment line
				continue;
			}

			int pos = line.indexOf('=');

			if (pos > 0) {
				String name = line.substring(0, pos).trim();
				String value = line.substring(pos + 1).trim();

				if ("percentage".equals(name)) {
					try {
						m_percentage = Integer.parseInt(value);
					} catch (Exception e) {
						m_logger.warn(String.format(
								"Invalid percentage(%s) found!", value), e);
					}
				} else if ("deals".equals(name)) {
					List<String> parts = Splitters.by(',').noEmptyItem().trim()
							.split(value);

					m_dealIds.addAll(parts);
				}
			} else {
				m_logger.warn(String.format(
						"Invalid configuration line(%s) found!", line));
			}
		}
	}

	@Override
	public void enableLogging(Logger logger) {
		m_logger = logger;
	}
}
