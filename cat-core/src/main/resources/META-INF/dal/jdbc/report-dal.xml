<?xml version="1.0" encoding="UTF-8"?>
<entities do-package="com.dianping.cat.core.dal" gen="true">

	<entity name="task" table="task" alias="t">
		<member name="count" value-type="int" select-expr="COUNT(*)" all="false" />
		<var name="start-limit" value-type="int" />
		<var name="end-limit" value-type="int" />
		<readsets>
			<readset name="REPORT_DOMAIN">
				<member name="report_domain" />
			</readset>
			<readset name="REPORT_NAME">
				<member name="report_name" />
			</readset>
			<readset name="REPORT_NAME_DOMAIN">
				<member name="report_domain" />
				<member name="report_name" />
			</readset>
			<readset name="COUNT">
				<member name="count" />
			</readset>
		</readsets>
		<query-defs>
			<query name="insert" type="INSERT">
				<statement><![CDATA[
				INSERT IGNORE INTO <TABLE/>
					(<FIELDS/>) 
				VALUES
					(<VALUES/>)
				]]></statement>
			</query>
			<query name="find-by-status-consumer" type="SELECT">
				<param name="status" />
				<param name="consumer" />
				<statement><![CDATA[
					SELECT <FIELDS/> 
					FROM <TABLE/> 
					WHERE <FIELD name='status'/> = ${status}
					<IF type='NOT_NULL' field='consumer'>
						AND  <FIELD name='consumer'/> = ${consumer}
					</IF> limit 1
				]]></statement>
			</query>

			<query name="update-todo-to-doing" type="UPDATE">
				<statement><![CDATA[
					UPDATE <TABLE/>
					SET <FIELD name='consumer'/>=${consumer}, 
						<FIELD name='status'/>=2, 
						<FIELD name='start-date'/>=${start-date}
					WHERE <FIELD name='status'/> = 1
					AND <FIELD name='id'/> = ${id};
				]]></statement>
			</query>

			<query name="update-doing-to-done" type="UPDATE">
				<statement><![CDATA[
					UPDATE <TABLE/>
					SET <FIELD name='status'/>=3, 
						<FIELD name='end-date'/>=${end-date}
					WHERE <FIELD name='status'/> = 2
					AND <FIELD name='id'/> = ${id};
				]]></statement>
			</query>

			<query name="update-failure-to-done" type="UPDATE">
				<statement><![CDATA[
				
				UPDATE <TABLE/>
				SET <FIELD name='status'/>=3, 
					<FIELD name='end-date'/>=${end-date}
				WHERE <FIELD name='status'/> =4
				AND <FIELD name='id'/> = ${id};
				
				]]></statement>
			</query>

			<query name="update-status-to-todo" type="UPDATE">
				<statement><![CDATA[
					UPDATE <TABLE/>
					SET <FIELD name='status'/>=1, 
					WHERE <FIELD name='id'/> = ${id};
				]]></statement>
			</query>

			<query name="update-doing-to-fail" type="UPDATE">
				<statement><![CDATA[
					UPDATE <TABLE/>
					SET <FIELD name='status'/>=4, 
						<FIELD name='end-date'/>=${end-date},
						<FIELD name='failure-count'/> = <FIELD name='failure-count'/> + 1
					WHERE <FIELD name='status'/> = 2
					AND <FIELD name='id'/> = ${id};
				]]></statement>
			</query>
		</query-defs>
	</entity>
	<entity name="hostinfo" table="hostinfo" alias="h">
		<member name="creation-date" insert-expr="NOW()" />
		<member name="last-modified-date" insert-expr="NOW()" update-expr="NOW()" />
		<query-defs>
			<query name="find-by-ip" type="SELECT">
				<param name="ip" />
				<statement><![CDATA[
				SELECT <FIELDS/> 
				FROM <TABLE/> 
				WHERE <FIELD name='ip'/> = ${ip}
				]]></statement>
			</query>
			<query name="find-all-ip" type="SELECT" multiple="true">
				<statement><![CDATA[
				SELECT <FIELDS/> 
				FROM <TABLE/> 
				]]></statement>
			</query>
			<query name="insert" type="INSERT">
				<statement><![CDATA[
			INSERT INTO <TABLE/>
			(<FIELDS/>) VALUES(<VALUES/>) 
			ON DUPLICATE KEY 
			UPDATE <FIELD name='domain'/> = ${domain},
            <FIELD name='last-modified-date'/> = NOW()]]></statement>
			</query>
		</query-defs>
	</entity>
	<entity name="project" table="project" alias="p">
		<member name="creation-date" insert-expr="NOW()" />
		<member name="modify-date" insert-expr="NOW()" update-expr="NOW()" />
		<query-defs>
			<query name="find-all" type="SELECT" multiple="true">
				<statement><![CDATA[
				SELECT <FIELDS/> 
				FROM <TABLE/> 
				]]></statement>
			</query>
			<query name="find-by-domain" type="SELECT">
				<param name="domain" />
				<statement><![CDATA[
				SELECT <FIELDS/> 
				FROM <TABLE/>  WHERE binary(<FIELD name='domain'/>) = binary(${domain})
				]]></statement>
			</query>
			<query name="find-by-cmdb-domain" type="SELECT">
				<param name="domain" />
				<statement><![CDATA[
				SELECT <FIELDS/> 
				FROM <TABLE/>  WHERE binary(<FIELD name='cmdb-domain'/>) = binary(${domain})
				]]></statement>
			</query>
			<query name="insert" type="INSERT">
				<statement><![CDATA[
				INSERT INTO <TABLE/>
				(<FIELDS/>) VALUES(<VALUES/>) 
				ON DUPLICATE KEY 
				UPDATE <FIELD name='domain'/> = ${domain},
            	<FIELD name='modify-date'/> = NOW()]]></statement>
			</query>
		</query-defs>
	</entity>
	<entity name="report-content" table="report_content" alias="rc" class-name="HourlyReportContent">
	 <member name="creation-date" insert-expr="NOW()" />
	 <member name="content-length" value-type="long" all="false" select-expr="length(content)/1024/1024" length="19" nullable="false" />
	 <member name="period" field="period" value-type="Date" nullable="false" />
	 <var name="start-id" value-type="int" />
	 <var name="capacity" value-type="double" />
	 <readsets>
		<readset name="LENGTH">
			<member name="report-id" />
			<member name="content-length" />
		</readset>
		<readset name="CONTENT">
			<member name="content" />
		</readset>
	 </readsets>
     <query-defs>
     	<query name="find-by-PK" type="SELECT">
	        <param name="key-report-id" />
	        <param name="period" />
	        <statement><![CDATA[SELECT <FIELDS/>
	        FROM <TABLE/>
	        WHERE <FIELD name='report-id'/> = ${key-report-id}]]></statement>
      	</query>
     	<query name="find-overload-report" type="SELECT" multiple="true">
			<param name="start-id" />
			<statement><![CDATA[
				SELECT <FIELDS/> 
				FROM <TABLE/> 
				WHERE <FIELD name='report-id'/> > ${start-id}
				ORDER BY <FIELD name='report-id'/> asc limit 1000
				]]></statement>
		</query>
     </query-defs>
    </entity>
	<entity name="report" table="report" alias="r"  class-name="HourlyReport">
		<member name="creation-date" insert-expr="NOW()" />
		<var name="start-date" value-type="Date" />
		<var name="end-date" value-type="Date" />
		<readsets>
			<readset name="DOMAIN_NAME">
				<member name="domain" />
				<member name="name" />
			</readset>
		</readsets>
		<query-defs>
			<query name="find-all-by-domain-name-period" type="SELECT" multiple="true">
				<param name="period" />
				<param name="domain" />
				<param name="name" />
				<statement><![CDATA[
					SELECT <FIELDS/> 
					FROM <TABLE/> 
					WHERE <FIELD name='period'/> = ${period}
					AND <FIELD name='domain'/> = ${domain}
					AND <FIELD name='name'/> = ${name}
					AND binary(<FIELD name='domain'/>) = binary(${domain})
					]]></statement>
			</query>
			<query name="find-all-by-period-name" type="SELECT" multiple="true">
				<param name="period" />
				<param name="name" />
				<statement><![CDATA[
					SELECT <FIELDS/> 
					FROM <TABLE/> 
					WHERE <FIELD name='period'/> = ${period}
					AND <FIELD name='name'/> = ${name}
					]]></statement>
			</query>
			<query name="insert" type="INSERT">
				<statement><![CDATA[
					INSERT 
					INTO <TABLE/>(<FIELDS/>) 
					VALUES(<VALUES/>)
				]]></statement>
			</query>
		</query-defs>
	</entity>
	<entity name="dailyreport" table="dailyreport" alias="dr" class-name="DailyReport">
		<member name="count" value-type="int" select-expr="COUNT(*)" all="false" />
		<var name="start-date" value-type="Date" />
		<var name="end-date" value-type="Date" />
		<var name="limits" value-type="int" />
		<readsets>
			<readset name="DOMAIN_NAME">
				<member name="domain" />
				<member name="name" />
			</readset>
			<readset name="COUNT">
				<member name="count" />
			</readset>
		</readsets>
		<query-defs>
			<query name="insert" type="INSERT">
				<statement><![CDATA[
					INSERT INTO <TABLE/>
						(<FIELDS/>) 
					VALUES
						(<VALUES/>)
					]]></statement>
			</query>
			<query name="find-by-domain-name-period" type="SELECT">
				<param name="domain" />
				<param name="name" />
				<param name="period" />
				<statement><![CDATA[
					SELECT <FIELDS/> 
					FROM <TABLE/> 
					WHERE <FIELD name='period'/> = ${period}
					AND <FIELD name='domain'/> = ${domain}
					AND <FIELD name='name'/> = ${name} 
					AND binary(<FIELD name='domain'/>) = binary(${domain})
					]]></statement>
			</query>
			<query name="delete-by-domain-name-period" type="DELETE">
				<param name="domain" />
				<param name="name" />
				<param name="period" />
				<statement><![CDATA[
					DELETE 
					FROM <TABLE/> 
					WHERE <FIELD name='period'/> = ${period}
					AND <FIELD name='domain'/> = ${domain}
					AND <FIELD name='name'/> = ${name} 
					AND binary(<FIELD name='domain'/>) = binary(${domain})
					]]></statement>
			</query>
			<query name="query-latest-reports-by-domain-name" type="SELECT" multiple="true">
				<param name="domain" />
				<param name="name" />
				<param name="limits" />
				<statement><![CDATA[
					SELECT <FIELDS/> 
					FROM <TABLE/> 
					WHERE <FIELD name='domain'/> = ${domain}
					AND <FIELD name='name'/> = ${name} 
					AND binary(<FIELD name='domain'/>) = binary(${domain})
					ORDER BY <FIELD name='id'/> DESC LIMIT ${limits}
					]]></statement>
			</query>
		</query-defs>
	</entity>
	<entity name="monthreport" table="monthreport" alias="m" class-name="MonthlyReport">
		<member name="creation-date" insert-expr="NOW()" />
		<query-defs>
			<query name="find-report-by-domain-name-period" type="SELECT">
				<param name="period" />
				<param name="domain" />
				<param name="name" />
				<statement><![CDATA[
					SELECT <FIELDS/> 
					FROM <TABLE/> 
					WHERE <FIELD name='period'/> = ${period}
					AND <FIELD name='domain'/> = ${domain}
					AND <FIELD name='name'/> = ${name} 
					AND binary(<FIELD name='domain'/>) = binary(${domain})
					]]></statement>
			</query>
			<query name="delete-report-by-domain-name-period" type="DELETE">
				<param name="period" />
				<param name="domain" />
				<param name="name" />
				<statement><![CDATA[
					DELETE 
					FROM <TABLE/> 
					WHERE <FIELD name='period'/> = ${period}
					AND <FIELD name='domain'/> = ${domain}
					AND <FIELD name='name'/> = ${name} 
					]]></statement>
			</query>
		</query-defs>
	</entity>
	
	<entity name="weeklyreport" table="weeklyreport" alias="w" class-name="WeeklyReport">
		<member name="creation-date" insert-expr="NOW()" />
		<query-defs>
			<query name="find-report-by-domain-name-period" type="SELECT">
				<param name="period" />
				<param name="domain" />
				<param name="name" />
				<statement><![CDATA[
					SELECT <FIELDS/> 
					FROM <TABLE/> 
					WHERE <FIELD name='period'/> = ${period}
					AND <FIELD name='domain'/> = ${domain}
					AND <FIELD name='name'/> = ${name} 
					AND binary(<FIELD name='domain'/>) = binary(${domain})
					]]></statement>
			</query>
			<query name="delete-report-by-domain-name-period" type="DELETE">
				<param name="period" />
				<param name="domain" />
				<param name="name" />
				<statement><![CDATA[
					DELETE 
					FROM <TABLE/> 
					WHERE <FIELD name='period'/> = ${period}
					AND <FIELD name='domain'/> = ${domain}
					AND <FIELD name='name'/> = ${name} 
					]]></statement>
			</query>
		</query-defs>
	</entity>
	<entity name="monthly-report-content" table="monthly_report_content" alias="mrc">
	 <member name="creation-date" insert-expr="NOW()" />
	 <member name="content-length" value-type="double" all="false" select-expr="length(content)/1024/1024" length="19" nullable="false" />
	 <var name="capacity" value-type="double" />
	 <var name="start-id" value-type="int" />
	 <readsets>
		<readset name="LENGTH">
			<member name="report-id" />
			<member name="content-length" />
		</readset>
	 </readsets>
     <query-defs>
     	<query name="find-overload-report" type="SELECT" multiple="true">
			<param name="start-id" />
			<statement><![CDATA[
				SELECT <FIELDS/> 
				FROM <TABLE/> 
				WHERE <FIELD name='report-id'/> > ${start-id}
				ORDER BY <FIELD name='report-id'/> asc  limit 1000
				]]></statement>
		</query>
     </query-defs>
    </entity>
    <entity name="weekly-report-content" table="weekly_report_content" alias="wrc">
	 <member name="creation-date" insert-expr="NOW()" />
	 <member name="content-length" value-type="double" all="false" select-expr="length(content)/1024/1024" length="19" nullable="false" />
	 <var name="capacity" value-type="double" />
	 <var name="start-id" value-type="int" />
	 <readsets>
		<readset name="LENGTH">
			<member name="report-id" />
			<member name="content-length" />
		</readset>
	 </readsets>
     <query-defs>
     	<query name="find-overload-report" type="SELECT" multiple="true">
			<param name="start-id" />
			<statement><![CDATA[
				SELECT <FIELDS/> 
				FROM <TABLE/> 
				WHERE <FIELD name='report-id'/> > ${start-id}
				ORDER BY <FIELD name='report-id'/> asc  limit 1000
				]]></statement>
		</query>
     </query-defs>
    </entity>
    <entity name="daily-report-content" table="daily_report_content" alias="drc">
	 <member name="creation-date" insert-expr="NOW()" />
	 <member name="content-length" value-type="double" all="false" select-expr="length(content)/1024/1024" length="19" nullable="false" />
	 <var name="start-id" value-type="int" />
	 <var name="end-id" value-type="int" />
	 <var name="capacity" value-type="double" />
	 <readsets>
		<readset name="LENGTH">
			<member name="report-id" />
			<member name="content-length" />
		</readset>
	 </readsets>
     <query-defs>
     	<query name="find-overload-report" type="SELECT" multiple="true">
			<param name="start-id" />
			<statement><![CDATA[
				SELECT <FIELDS/> 
				FROM <TABLE/> 
				WHERE <FIELD name='report-id'/> > ${start-id}
				ORDER BY <FIELD name='report-id'/> asc  limit 1000
				]]></statement>
		</query>
     </query-defs>
    </entity>
</entities>